The 64-bit Kronos Architecture

General Purpose Registers
	R0-R15

Specific Purpose Registers
	IP  - Instruction pointer (always aligned to 16 bits, user can read or write, not addressable)
	SP  - Stack pointer (user can read)
	UR  - User register (user can read)
	KR  - Kernel register
	IHP - Interrupt handler pointer
	IRA - Interrupt return address (least significant bit is privilege)
	AVA - Access violation address
	TMA - TLB Miss address
	TRA - TLB Return address (least significant bit is privilege)
	ECR - Exception control register (readonly)
	SCR - Status control register

Exception Control Register
	0:2  - Exception vector
		0: No exception
		1: Invalid operation
		2: Access violation
		3: Misaligned access
	 3   - Write error
	4:63 - Reserved

Status Control Register
	0:8   - Address space ID
	 9    - Interrupt enable
	10    - Privilege, 0: Kernel, 1: User
	11    - MMU enable
	12    - TLB refill
	13    - Halt
	14:63 - Reserved

TLB Entry
	0:8   - Address space ID
	 9    - Present
	10    - Writable
	11    - Cache
	12:63 - Higher 52 bits of physical address

Instruction Encoding
	0:7   - Opcode
	8:11  - Destination
	12:15 - Source

	Certain opcodes require a properly aligned constant after them

Instruction Set
	Opcode - Mnemonic - Description

	 0 - NOP     - Do nothing for a cycle
	 1 - WBC     - Writeback all caches of this core without invalidating them
	 2 - INVC    - Writeback all caches of this core and invalidate them
	 3 - INVTLB  - Invalidate the entire TLB
	 4 - INVPG   - Invalidate a single TLB entry at virt address dest
	 5 - RET     - Pop stack to IP
	 6 - TLBRET  - Return from TLB refill
	 7 - IRET    - Return from interrupt
	 8 - UD      - Invalid instruction
	 9 - FENCE   - Memory fence loads and stores
	 A - PUSH    - Push dest to stack
	 B - POP     - Pop stack to dest
	 C - NEG     - Two's complement dest
	 D - NOT     - One's complement dest
	 E - EXT8    - Sign-extend dest from 8 to 64 bits
	 F - EXT16   - Sign-extend dest from 16 to 64 bits
	10 - EXT32   - Sign-extend dest from 32 to 64 bits
	11 - JMPR    - Jump to dest
	12 - CALLR   - Call dest
	13 - TLBFILL - Moves TLB entry dest with address TMA to the TLB
	14 - JMP     - Signed 24 bit relative jump
	15 - CALL    - Signed 24 bit relative call
	16 - IMM8    - Move 8 bit immediate to dest
	17 - IMM16   - Move 16 bit immediate to dest
	18 - IMM32   - Move 32 bit immediate to dest
	19 - IMM64   - Move 64 bit immediate to dest
	1A - JC      - Conditional 32 bit relative jump if mask3 & dest is nonzero
	1B - MOV     - Move src to dest
	1C - LDSP    - Move special register src to dest
	1D - STSP    - Move src to special register dest
	1E - LOAD8   - Load the 8 bit contents of src into dest
	1F - LOAD16  - Load the 16 bit contents of src into dest
	20 - LOAD32  - Load the 32 bit contents of src into dest
	21 - LOAD64  - Load the 64 bit contents of src into dest
	22 - STORE8  - Store the 8 bit contents of src in dest
	23 - STORE16 - Store the 16 bit contents of src in dest
	24 - STORE32 - Store the 32 bit contents of src in dest
	25 - STORE64 - Store the 64 bit contents of src in dest
	26 - ADD     - Add src to dest
	27 - SUB     - Subtract src from dest
	28 - MUL     - Multiply src with dest
	29 - DIV     - Divide dest by src
	2A - REM     - Remainder of dest with src
	2B - AND     - Bitwise-and dest with src
	2C - OR      - Bitwise-or dest with src
	2D - XOR     - Bitwise-xor dest with src
	2E - SHL     - Shift dest to the left by src
	2F - SHR     - Shift dest to the right by src
	30 - CMP     - Compare dest with src, set dest to the flags
	31 - SCMP    - Signed compare dest with src, set dest to the flags
	               0: equal 1: greater 2: lesser
